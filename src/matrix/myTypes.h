#pragma once

typedef int IdxType;

enum MATRIX_UNRARY_OPERATIONS
{
	UNARY_BASE = 0,
	UNARY_TRANSPOSE = 1,
	UNARY_MINUS = 2,
	UNARY_SQUARED = 3,
	UNARY_MASKED = 4,
};

enum MATRIX_BINARY_OPERATIONS
{
	BINARY_BASE = 0,
	BINARY_ADD = 1,
	BINARY_SUB = 2,
	BINARY_MATMUL = 3,
	BINARY_MATDIV = 4,
	BINARY_EMUL = 5,
	BINARY_EDIV = 6,
};

enum MATRIX_ONE_SCALAR_OPERATIONS
{
	ONE_SCALAR_BASE = 0,
	ONE_SCALAR_ADD = 1,
	ONE_SCALAR_SUB_MLEFT = 2,
	ONE_SCALAR_SUB_MRIGHT = 3,
	ONE_SCALAR_MUL = 4,
	ONE_SCALAR_DIV_MLEFT = 5,
	ONE_SCALAR_DIV_MRIGHT = 6,
};

enum MATRIX_MASK_UNARY_OPERATIONS
{
	MASK_UNARY_BASE = 0,
	MASK_UNARY_TRANSPOSE = 1,
	MASK_UNARY_NOT = 2
};

enum MATRIX_MASK_BINARY_OPERATIONS
{
	MASK_BINARY_BASE = 0,
	MASK_BINARY_AND = 1,
	MASK_BINARY_OR = 2,
	MASK_BINARY_XOR = 4,
	MASK_BINARY_EXCLUDE = 5,
	MASK_BINARY_CMP_LESS = 6,
	MASK_BINARY_CMP_LEQ = 7,
	MASK_BINARY_CMP_GREATER = 8,
	MASK_BINARY_CMP_GEQ = 9,
	MASK_BINARY_CMP_EQUAL = 10,
	MASK_BINARY_CMP_NEQ = 11,
};


enum MATRIX_MASK_ONE_SCALAR_OPERATIONS
{
	MASK_ONE_SCALAR_BASE = 0,
	MASK_ONE_SCALAR_LESS_MLEFT = 1,
	MASK_ONE_SCALAR_LESS_MRIGHT = 2,
	MASK_ONE_SCALAR_LEQ_MLEFT = 3,
	MASK_ONE_SCALAR_LEQ_MRIGHT = 4,
	MASK_ONE_SCALAR_GREATER_MLEFT = 5,
	MASK_ONE_SCALAR_GREATER_MRIGHT = 6,
	MASK_ONE_SCALAR_GEQ_MLEFT = 7,
	MASK_ONE_SCALAR_GEQ_MRIGHT = 8,
	MASK_ONE_SCALAR_EQUAL = 9,
	MASK_ONE_SCALAR_NEQ = 10
};